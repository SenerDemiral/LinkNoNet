@inject IDialogService DialogService
@inject AppState AppState
@inject ICircuitUserService UserService
@implements IDisposable
@*<PageTitle>Link#Net</PageTitle>*@

<MudThemeProvider Theme="MyCustomTheme"/>
<MudDialogProvider />
<MudSnackbarProvider />

@*<MudLayout>*@
<MudAppBar Elevation="2" Dense=true Fixed="true">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" 
        OnClick="@((e) => DrawerToggle())" />
    <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true" >
        <div class="d-flex gap-2 overflow-x-auto ">
 @*           @foreach (var d in cmpDic)
            {
                string cls = d.Key == ActiveTabKey ? ActiveTabClass : InActiveTabClass;
                <MudButtonGroup @key="d.Key" Class="@cls" Variant="Variant.Filled" Size="Size.Small" OverrideStyles="true">
                    <MudButton Class="px-1" Style="color: inherit;" OnClick="() => TabSelect(d.Key)">
                        @d.Value.TabText
                    </MudButton>
                    <MudIconButton Class="px-1" Style="color: inherit;" Icon="@Icons.Material.Filled.Close"
                            OnClick="() => TabRemove(d.Key)" />
                </MudButtonGroup>
            }   
        </div>*@
           @foreach (var d in cmpDic)
            {
                <MudButtonGroup @key="d.Key" Color="@TabColor(d.Key)" Variant="Variant.Filled" Size="Size.Small" OverrideStyles="true">
                    <MudButton Class="px-1"  OnClick="() => TabSelect(d.Key)">@d.Value.TabText</MudButton>
                    <MudIconButton Class="px-1" Icon="@Icons.Material.Filled.Close" OnClick="() => TabRemove(d.Key)" />
                </MudButtonGroup>
            }   
        </div>
    </MudHidden>

    <MudSpacer />

    <MudMenu FullWidth="false" Label="Open Menu" Dense="true" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopRight">
        <ActivatorContent>
            <MudAvatar Color="Color.Warning" Size="Size.Medium">@TabCount</MudAvatar>
        </ActivatorContent>
        <ChildContent>
            @foreach (var d in cmpDic)
            {
                <MudMenuItem @key="d.Key" Class="py-0">
                    <MudButtonGroup Color="@TabColor(d.Key)" Variant="Variant.Filled" Size="Size.Small" OverrideStyles="true" DisableElevation=false>
                        <MudButton  OnClick="() => TabSelect(d.Key)">@d.Value.TabText</MudButton>
                        <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="() => TabRemove(d.Key)" />
                    </MudButtonGroup>
                </MudMenuItem>
            }
        </ChildContent>
    </MudMenu>

@*    <MudMenu FullWidth="false" Label="Open Menu" Dense="true" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopRight">
        <ActivatorContent>
            <MudAvatar Color="Color.Warning" Size="Size.Medium">@TabCount</MudAvatar>
        </ActivatorContent>
        <ChildContent>
            @foreach (var d in cmpDic)
            {
                string cls = d.Key == ActiveTabKey ? ActiveTabClass : InActiveTabClass;
                <MudMenuItem @key="d.Key" Class="py-0">
                    <MudButtonGroup Class="@cls" Variant="Variant.Filled" Size="Size.Small" OverrideStyles="true">
                        <MudButton Class="px-1" Style="color: inherit;" OnClick="() => TabSelect(d.Key)">@d.Value.TabText</MudButton>
                        <MudIconButton Class="px-1" Style="color: inherit;" Icon="@Icons.Material.Filled.Close" OnClick="() => TabRemove(d.Key)" />
                    </MudButtonGroup>
                </MudMenuItem>
            }
        </ChildContent>
    </MudMenu>
*@
    <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/SenerDemiral" Target="_blank" />
</MudAppBar>


<MudDrawer Open="_drawerOpen" Elevation="1" Variant="@DrawerVariant.Persistent" DisableOverlay="true">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">TntMud</MudText>
    </MudDrawerHeader>
    <MudNavMenu>
        <MudNavLink OnClick="() => AddCounter()">Counter</MudNavLink>
        <MudNavLink OnClick="() => AddIndex()">Index</MudNavLink>
        <MudNavLink OnClick="() => AddFetchData(null, DateTime.Now.ToString())">FetchData</MudNavLink>
        @if (AppState.UsrId == 0)
        {
            <MudNavLink Icon="@Icons.Material.Filled.Login"
                OnClick="@(() => DialogService.Show<LoginDialog>())">Login
            </MudNavLink>
            <MudNavLink Icon="@Icons.Filled.AppRegistration" 
                OnClick="@(() => DialogService.Show<TntRegisterDialog>())">Tanıtıcı Ol
            </MudNavLink>
        }
        else
        {
            @if(AppState.UsrTyp == "A") {
                <MudNavLink OnClick="() => AddUT()">Users</MudNavLink>
            }
            <MudNavLink Icon="@Icons.Material.Filled.Logout" 
                OnClick="@Logout">@AppState.UsrMoniker @UserService.NoC.ToString()/@UserService.NoU.ToString()/@UserService.No0.ToString() 
            </MudNavLink>
        }
    </MudNavMenu>
</MudDrawer>

<MudMainContent>
    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="pa-2">
        @*<MudPaper Class="pa-2">*@
            <CascadingValue Value=this>
                @foreach (var d in cmpDic)
                {
                    <div @key="d.Key" class="@(d.Key == ActiveTabKey ? "d-block" : "d-none")">
                        <DynamicComponent Type="@d.Value.CmpType" Parameters="d.Value.Params" />
                    </div>
                }
            </CascadingValue>
        @*</MudPaper>*@
        <MudText Align="Align.Center" Style="color:white; background-color: grey ">Link#Net © @DateTime.Today.Year v&#8203;@Constants.PublishVersion</MudText>
    </MudContainer>
</MudMainContent>
@*</MudLayout>*@


@code{
    private async Task Logout()
    {
        await AppState.Logout();
        cmpDic.Clear();
        ActiveTabKey = TabKeyGen;
    }

    public void AddIndex(bool refresh = false)
    {
        var i = AddDynCmp("Idx", typeof(Pages.Index), null);

        if (refresh)
            StateHasChanged();
    }

    public void AddUT(bool refresh = false)
    {
        var i = AddDynCmp("Usr", typeof(Pages.UtAdm), null);

        if (refresh)
            StateHasChanged();
    }

    public void AddCounter(bool refresh = false)
    {
        var i = AddDynCmp("Ctr", typeof(Counter), null);
        
        if (refresh)
            StateHasChanged();
    }

    public void AddFetchData(string? p1, string? p2, bool refresh = false)
    {
        // Parametre gonderiyorsan ilgili component de bu parametre tanimli olmali, yoksa runtime error
        // Bekledigi parametreyi gondermezsen sorun cikartmiyor        
        AddDynCmp("FD", typeof(FetchData), new()
        {
            { "P1", p1 },
            { "P2", p2 }
        });
        
        if (refresh)
            StateHasChanged();
    }
}

@code {
    [Parameter]
    public ConnectionInfo? connectionInfo { get; set; }

    bool _drawerOpen = true;

    public int ActiveTabKey = 0;
    private int TabKeyGen = 0;
    string ActiveTabClass = "red darken-1 shades-text text-white";
    string InActiveTabClass = "grey shades-text text-white";
    string TabCount = string.Empty;

    public Dictionary<int, DynCmp> cmpDic = new();

    MudTheme MyCustomTheme = new MudTheme()
    {
        Typography = new Typography()
        {
            Button = new Button()
            {
              TextTransform = "none"
            }
        }
    };

    private Color TabColor(int key)
    {
        string aaa = Colors.DeepOrange.Accent1;
        return key == ActiveTabKey ? Color.Error : Color.Info;
    }

    private string TabClass(int key)
    {
        return key == ActiveTabKey ? "d-block" : "d-none";
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            DialogService.Show<OnEnter>();
            ////Login.OnEnter oe = new();
            //await oe.TryEnter();

        }
    }
    protected override async Task OnInitializedAsync()
    {
        //refresh = false;
        int usrId = 0;
        //var toto = await _protectedLocalStorage.GetAsync<int>(Constants.BrowserUsrIdKey);
        //if (toto.Success)
        //{
        //    Login.OnEnter oe = new();
        //    await oe.TryEnter();
        //}

        await AppState.OnEnter(connectionInfo?.IPAddress!);
        AppState.UsrChanged += App_UsrChanged;
        UserService.CircuitsChanged += App_UsrChanged;

        //refresh = true;

        //TabSelect(0);
        //await Task.CompletedTask;
        //var selectedType = Type.GetType($"TntMud.Pages.{cmpDic[0].Text}");
    }

    private void App_UsrChanged(object sender, EventArgs e)
    {
        //UserRemovedMessage = $"{e.UserId} disconnected";
        InvokeAsync(StateHasChanged);
    }

    public void TabSelect(int selectTabKey)
    {
        if (selectTabKey != ActiveTabKey)
        {
            ActiveTabKey = selectTabKey;
        }
    }

    private void TabRemove(int removeTabKey)
    {
        cmpDic.Remove(removeTabKey);
        if (cmpDic.Count == 0)
        {
            ActiveTabKey = -1; // TabKeyGen;
            _drawerOpen = true;
        }
        else
        {
            if (ActiveTabKey == removeTabKey)  // if Active removed
                ActiveTabKey = cmpDic.Keys.First();
            TabSelect(ActiveTabKey);
        }
        TabCount = cmpDic.Count.ToString();
    }

    public int AddDynCmp(string tabText, Type type, Dictionary<string, object>? prms)
    {
        int i = TabKeyGen;

        cmpDic.Add(TabKeyGen, new DynCmp { TabText = $"{tabText} {i}", CmpType = type, Params = prms });
        TabSelect(TabKeyGen);
        TabKeyGen++;
        if (_drawerOpen)
            _drawerOpen = false;

        TabCount = cmpDic.Count.ToString();
        return i;
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public void Dispose()
    {
        AppState.UsrChanged -= App_UsrChanged;
        UserService.CircuitsChanged -= App_UsrChanged;
    }

    public class DynCmp
    {
        public string TabText { get; set; } = "";
        public Type? CmpType { get; set; }
        public Dictionary<string, object>? Params { get; set; }
    }
}