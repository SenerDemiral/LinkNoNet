@inject IDialogService DialogService
@inject AppState AppState
@inject ICircuitUserService UserService

<MudThemeProvider Theme="MyCustomTheme"/>
<MudDialogProvider />
<MudSnackbarProvider />

<MudAppBar Elevation="0" Dense=true Fixed=true>
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
    <div class="d-flex gap-2 overflow-x-auto ">
        @foreach (var d in cmpDic)
        {
            <MudButtonGroup Color="@TabColor(d.Key)" Variant="Variant.Filled" Size="Size.Small">
                <MudButton @onclick="() => TabSelect(d.Key)" Class="px-1">@d.Value.TabText</MudButton>
                <MudIconButton Class="px-1" Icon="@Icons.Material.Filled.Close" @onclick="() => TabRemove(d.Key)"></MudIconButton>
            </MudButtonGroup>
        }   
    </div>
    <MudSpacer />
    <MudIconButton Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Inherit" Link="https://mudblazor.com/" Target="_blank" />
    <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/MudBlazor/MudBlazor/" Target="_blank" />
</MudAppBar>

<MudDrawer @bind-Open="_drawerOpen" Elevation="1"  Variant="@DrawerVariant.Responsive" ClipMode="@DrawerClipMode.Docked">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">TntMud</MudText>
    </MudDrawerHeader>
    <MudNavMenu>
        <MudNavLink 
            OnClick=@aaa>Store
        </MudNavLink>
        @if (AppState.UsrId == 0)
        {
            <MudNavLink Icon="@Icons.Material.Filled.Login"
                OnClick="@(() => DialogService.Show<LoginDialog>())">Login
            </MudNavLink>
            <MudNavLink Icon="@Icons.Filled.AppRegistration" 
                OnClick="@(() => DialogService.Show<TntRegisterDialog>())">Tanıtıcı Ol
            </MudNavLink>
        }
        else
        {
            <MudNavLink Icon="@Icons.Material.Filled.Logout" 
                OnClick="@Logout">@AppState.UsrId @UserService.NoC.ToString()/@UserService.NoU.ToString()/@UserService.No0.ToString() 
            </MudNavLink>
        }
    </MudNavMenu>
</MudDrawer>

<MudMainContent>
    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="pt-auto my-2">
    @*<MudPaper Class="pa-2 ma-2 d-flex justify-center  mud-theme-info" Elevation="0">Paper</MudPaper>*@
    @*<div class="d-flex justify-center ">Header</div>*@
        @if (refresh)
        {
            <MudText Typo="Typo.subtitle2" Align="Align.Center">@cmpDic[ActiveTabKey].CmpText</MudText>
            <div class="card-body">
                <CascadingValue Value=this>
                    @foreach (var d in cmpDic)
                    {
                    <div @key="d.Key" class="@TabClass(d.Key)">
                        <DynamicComponent Type="@d.Value.CmpType" Parameters="d.Value.Params" />
                    </div>
                    }
            </CascadingValue>
        </div>
        }
    </MudContainer>
</MudMainContent>

@code {
    [Parameter]
    public ConnectionInfo? connectionInfo { get; set; }

    bool _drawerOpen = true;

    private int currentCount = 0;

    public int ActiveTabKey = 0;
    private int TabKeyGen = 0;


    public Dictionary<int, DynCmp> cmpDic = new();

    MudTheme MyCustomTheme = new MudTheme()
    {
        Typography = new Typography()
        {
            Button = new Button()
            {
              TextTransform = "none"
            }
        }
    };

    private Color TabColor(int key)
    {
        //string aaa = Colors.DeepOrange.Accent1;
        return key == ActiveTabKey ? Color.Secondary : Color.Tertiary;
    }
    private string TabClass(int key)
    {
        return key == ActiveTabKey ? "d-block" : "d-none";
    }

    bool refresh = true;
    protected override bool ShouldRender()
    {
        return refresh;
    }

    protected override async Task OnInitializedAsync()
    {
        refresh = false;
        await AppState.OnEnter(connectionInfo?.IPAddress!);
        AppState.UsrChanged += App_UsrChanged;
        UserService.CircuitsChanged += App_UsrChanged;

        AddDynCmp("Ctrrrrrrrrrrr", "Counter", typeof(Counter), null);
        AddDynCmp("Idx", "Index", typeof(Index), null);

        // Parametre gonderiyorsan ilgili component de bu parametre tanimli olmali, yoksa runtime error
        // Bekledigi parametreyi gondermezsen sorun cikartmiyor
        cmpDic.Add(TabKeyGen++, new DynCmp { TabText = "Aa1", CmpType = typeof(FetchData), Params = new ()
        {
            { "P1", "Ooh, no." },
            { "P2", "Ooh, yes." }
        } });

        AddDynCmp("FD", "FetchData", typeof(FetchData), new()
        {
            { "P1", "111" },
            { "P2", DateTime.Now.ToString() }
        });
        refresh = true;

        TabSelect(0);
        await Task.CompletedTask;
        //var selectedType = Type.GetType($"TntMud.Pages.{cmpDic[0].Text}");
    }

    private void App_UsrChanged(object sender, EventArgs e)
    {
        //UserRemovedMessage = $"{e.UserId} disconnected";
        InvokeAsync(StateHasChanged);
    }

    private async Task Logout()
    {
        refresh = false;
        await AppState.Logout();
        cmpDic.Clear();
        ActiveTabKey = TabKeyGen;
        refresh = true;
    }

    public void TabSelect(int selectTabKey)
    {
        if (selectTabKey != ActiveTabKey)
        {
            ActiveTabKey = selectTabKey;
        }
    }

    private void TabRemove(int tabKey)
    {
        if (tabKey != ActiveTabKey)
        {
            cmpDic.Remove(tabKey);
        }
        else
        {
            cmpDic.Remove(tabKey);
            if (cmpDic.Count == 0)
            {
                ActiveTabKey = TabKeyGen;
            }
            else
            {
                ActiveTabKey = cmpDic.Keys.First();
                TabSelect(ActiveTabKey);
            }
        }
    }

    public int AddDynCmp(string tabText, string cmpText, Type type, Dictionary<string, object>? prms)
    {
        int i = TabKeyGen;

        cmpDic.Add(TabKeyGen, new DynCmp { TabText = tabText + i.ToString(), CmpText = cmpText, CmpType = type, Params = prms });
        TabSelect(TabKeyGen);
        TabKeyGen++;

        return i;
    }

    void aaa()
    {
        var i = AddDynCmp("Idx3", "Index", typeof(Index), null);
        _drawerOpen = false;
        //DrawerToggle();
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public class DynCmp
    {
        public string TabText { get; set; } = "";
        public string CmpText { get; set; } = "";
        public Type? CmpType { get; set; }
        public Dictionary<string, object>? Params { get; set; }
    }
}