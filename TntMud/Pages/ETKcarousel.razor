@inject AppState AppState
@inject IDataAccess db

<MudCarousel TData="object" Style="height:500px;"
             ShowArrows="false" ShowBullets="true" AutoCycle="false" >
     <MudCarouselItem  Color="@CarouselItemColor()">
        <div class="d-flex justify-center" style="height:100%">
            <MudCarousel ItemsSource="@data" @bind-SelectedIndex="selectedIndex"  Class="mud-width-full" AutoCycle="false" ShowBullets="false">
                <ItemTemplate>
                    <div class="etGrid" style="height:100%">

                        <MudButton Disabled="@ButtonDisabled()" OnClick="TglKatilimciStu" Variant="Variant.Filled" Color="Color.Primary">
                            @ButtonText()
                        </MudButton>

                        <MudText Class="box" >
                            <div class="topleft">Etkinlik #@context.ETid</div>
                            @context.EBAd [@context.kSay kişi]
                            <span class="ml-auto mt-n1">@((Constants.tStus)context.tStu)&nbsp;</span>
                            <MudIcon Class="mt-n1" Icon="@context.selectedTstuIcon" Color="Color.Inherit" Size="Size.Medium" />
                        </MudText>

                        <MudText Class="box" >
                            @context.Yer  
                            <div class="topleft">Yer</div>
                            <div class="ml-auto">@context.EXD.ToString("dd.MM.yy hh:mm ddd")</div>
                            <div class="topright">Tarih</div>
                        </MudText>


                        <MudText Class="box" >
                            @context.BgnTS.ToString("dd.MM.yy hh:mm ddd")
                            <div class="ml-auto">@context.EndTS.ToString("dd.MM.yy hh:mm ddd")</div>
                            <div class="topleft">Katılım Başlangıç</div>
                            <div class="topright">Katılım Bitiş</div>
                        </MudText>


                        <MudText Class="box" >
                            @AppState.UsrMoniker
                            <div class="topleft">Katılımcı </div>
                            <div class="ml-auto mt-n1">@((Constants.kStus)context.kStu)&nbsp;</div>
                            <MudIcon Class="mt-n1" Size="Size.Medium" Icon="@context.selectedKstuIcon" Color="Color.Inherit" />
                        </MudText>
                            
                        <MudText Class="box" >
                            @context.dMoniker [@context.deSay]
                            <div class="topleft">Düzenleyen</div>
                        </MudText>

                        
                        <MudText Class="box" >
                            <textarea rows="3"  disabled style="width: 100%; color: inherit; background-color: inherit; resize: vertical;">@context.Info</textarea>
                            <div class="topleft">Bilgi</div>
                        </MudText>
                    </div>
                </ItemTemplate>
            </MudCarousel>
        </div>
    </MudCarouselItem>
    
    <MudCarouselItem Color="@Color.Secondary">
        <div class="d-flex flex-column justify-center align-center" style="height:90%">
            <MudPaper Width="50%">
            <MudIcon Class="mx-auto my-auto" Icon="@Icons.Custom.Brands.MudBlazor" Size="@Size.Large" />
                <MudText Align="@Align.Center" Class="mx-auto">aaaa</MudText>
                <MudText Align="@Align.Center" Class="mx-auto">bbbbbbbbb</MudText>
            </MudPaper>
        </div>
    </MudCarouselItem>
</MudCarousel>


@*<MudText>SelectedIndex: @selectedIndex @data.ElementAt(selectedIndex).EBAd</MudText>
<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="true">Primary</MudButton>
*@

<style>
    .etGrid {
        display: grid;
        grid-gap: 4px;
        grid-template-columns: minmax(300px, 500px);
        /*background-color: #fff;*/
        /*color: #444;*/
        justify-content: center;
        align-content: center;
    }

    .box {
        background-color: #444;
        color: white;
        /*border: 1px solid;*/
        border-radius: var(--mud-default-borderradius);
        padding: 10px 4px 0 4px;
        /*font-size: 150%;*/
        display: inline-flex;
        position: relative;
    }

    .topleft {
        position: absolute;
        top: 0;
        left: 4px;
        font-size: 0.6em;
        color: aqua;
        background-color: inherit;
}

    .topright {
        position: absolute;
        top: 0;
        right: 4px;
        font-size: 0.6em;
        color: aqua;
        background-color: inherit;
    }

    }
</style>
@code {
    [CascadingParameter] App app { get; set; }

    private IEnumerable<ET>? data;

    private int selectedIndex; 
    //{
    //    get { return name; }   // get method
    //    set { name = value; }  // set method
    //}
    private string ReadOnly = "aaaaaaaaaaaaa";
    //private string selectedIcon = @Icons.Filled.EventSeat;   //Icons.Custom.Brands.MudBlazor;
    private void selectedIndexChanged(int si){
        selectedIndex = si;
    }

    protected override async Task OnInitializedAsync()
    {
        string sql = $"select * from ET_ACTIVE2(@UTid)";
        data = await db.LoadData<ET, dynamic>(sql, new { UTid = AppState.UsrId});

        //var aaa = data.ToList();
        //var bbb = aaa[0].ETid;
        //var ccc = data.ElementAt(0);
        //var aaa = await db.StoreProc<SMTP, dynamic>("APP_SMTP", new { });
    }

    private Color CarouselItemColor() {
        return Color.Surface;
        if (data.ElementAt(selectedIndex).iskMdf)
            return Color.Primary;
        return Color.Warning;
    }

    private string ButtonText() {
        string txt = "";
        var item = data.ElementAt(selectedIndex);

        Constants.kStus kStu = (Constants.kStus)item.kStu;

        if (!item.iskMdf)
            return "!!!"; 

        //if (item.isMdfbl) {
        switch(kStu){
            case Constants.kStus.Katılmadın:
                txt = "Katıl";
                break;
            case Constants.kStus.Vazgeçtim:
                txt = "Vazgeçmişsin! Hala katılabilirsin";
                break;
            case Constants.kStus.Katılırım:
                txt = "Vazgeç";
                break;
            default:
                txt = kStu.ToString();
                break;
        }
        //if (item.kStu == (int)kStu.Katılmadı)
        //    txt = "Katıl";
        //else if (item.kStu == (int)kStu.Vazgeçti)
        //    txt = "Vazgeçmişsin! Hala katılabilirsin";
        //else
        //    txt = "Vazgeç";
        //if (item.kStu == ET.kStu.Katilmadi)
        //    txt = "Katıl";
        //else if (item.kStu == -2)
        //    txt = "Vazgeçmişsin! Hala katılabilirsin";
        //else
        //    txt = "Vazgeç";
        //}
        return txt;
    }

    private async Task TglKatilimciStu()
    {
        var item = data.ElementAt(selectedIndex);

        string sp = $"EK_KTGL(@ETid, @kUTid)";
        var rtrn = await db.StoreProc<dynamic, dynamic>(sp, new { ETid = item.ETid, kUTid = AppState.UsrId });
        
        item.kStu = rtrn.KSTU;
        item.kSay = rtrn.KSAY;
    }

    private bool ButtonDisabled() {
        if (data.ElementAt(selectedIndex).iskMdf)
            return false;
        return true;
    }

    private void SelectedIndexChanged(){
        var aaa = selectedIndex;
    }

    private class ET
    {
        public int ETid { get; set; }
        public DateTime EXD { get; set; }
        public DateTime BgnTS { get; set; }
        public DateTime EndTS { get; set; }
        public string Yer { get; set; }
        public int EBid { get; set; }
        public string EBAd { get; set; }
        public int dUTid { get; set; }
        public string dMoniker { get; set; }
        public DateTime StuTS { get; set; }
        public string Info { get; set; }
        public DateTime InsTS { get; set; }

        public int Ownr_ { get; set; }  // UsrId duzenleyen mi
        public int kMdf_ { get; set; }  // Usr Katilimci olarak @EK degisiklik yapabilir mi
        public int kSay { get; set; }   // ET->EK.count
        public int deSay { get; set; }   // ET->EK.count
        public int tStu { get; set; }   // @ET Duzenleyenin durumu
        public int dStu { get; set; }   // @EK Duzenleyenin durumu
        public int kStu { get; set; }   // @EK Katilimcinin durumu

        public bool isOwner => Ownr_ == 1 ? true : false;
        public bool iskMdf => kMdf_ == 1 ? true : false;

        public string selectedKstuIcon => (Constants.kStus)kStu switch
        {
            Constants.kStus.Katılmadın => Icons.Filled.GppBad,
            Constants.kStus.Katılırım => Icons.Filled.GppGood,
            Constants.kStus.Vazgeçtim => Icons.Filled.GppMaybe,
            Constants.kStus.Seçildin => Icons.Filled.SentimentVerySatisfied,
            Constants.kStus.Seçilmedin => Icons.Filled.SentimentVeryDissatisfied,
            _ => ""
        };
        public string selectedTstuIcon => (Constants.tStus)tStu switch
        {
            Constants.tStus.İptal => Icons.Filled.HourglassDisabled,
            Constants.tStus.KatılımBaşlamadı => Icons.Filled.HourglassEmpty,
            Constants.tStus.KatılımSürüyor => Icons.Filled.HourglassTop,
            Constants.tStus.KatılımBitti => Icons.Filled.HourglassFull,
            _ => ""
        };
    }
}
