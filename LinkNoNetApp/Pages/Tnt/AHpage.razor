@page "/tnt/ah"
@inject NavigationManager NavigationManager
@inject IDataAccess db
@inject IDialogService DialogService
@inject IEmailService EmailService
<PageTitle>Tanıtıcı</PageTitle>

<style>
    .mud-table-cell {
        padding: 4px !important;
        font-weight: inherit;
    }
</style>

<div class="mud-theme-dark">
    <MudText Align="Align.Center" Typo="Typo.body2">Gelen Duyurular</MudText>
</div>

<MudDataGrid T="AH" Items="@data" @ref="mudDataGrid"
             Breakpoint="Breakpoint.None"
             FixedHeader="true"
             Height="@Constants.Height"
             HorizontalScrollbar="false"
             Virtualize="true"
             Hover="true" Striped="true" Dense="true" Bordered="true"
             Filterable="false"
             FilterMode="DataGridFilterMode.ColumnFilterMenu"
             Groupable="false"
             MultiSelection="false"
             SelectedItems="@selectedItems"
             SelectedItemChanged="@selectedItemChanged"
             RowClassFunc="@SelectedRowClassFunc"
             RowClass="py-0"
             RowClick="@RowClicked"
             RowStyleFunc="@_rowStyleFunc">
    <ColGroup>
        <col style="width:5%;" />
        <col style="width:20%;" />
        <col style="width:20%;" />
        <col />
        <col style="width:10%;" />
    </ColGroup>
    <Columns>
        <Column T="AH" Field="@nameof(AH.isOk)" Title="Okundu">
            <CellTemplate>
                <input type="checkbox"
                       checked="@context.Item.isOk"
                       onclick="@(() => OnOkClick(context.Item))">
                @context.Item.AHid
            </CellTemplate>
        </Column>

        <Column T="AH" Field="@nameof(AH.FrName)" Title="Kimden" />
        @*<Column T="AH" Field="@nameof(AH.ToName)" Title="Kime" />*@

        <Column T="AH" Field="@nameof(AH.Sbj)" Title="Konu" />

        <Column T="AH" Field="@nameof(AH.mMsg)" Title="Mesaj">
            <CellTemplate>
                <p style="max-height:60px; overflow-y:auto; scrollbar-width:thin">
                    @context.Item.mMsg
                </p>
            </CellTemplate>
        </Column>

        <Column T="AH" Field="@nameof(AH.InsTS)">
            <CellTemplate>
                @context.Item.InsTS.ToString("dd.MM.yy HH:mm")
            </CellTemplate>
        </Column>
    </Columns>
</MudDataGrid>

<MudDialog @bind-IsVisible="contextMenuVisible"
           Options="dialogOptions"
           DisableSidePadding="false">
    <DialogContent>
        @*<MudContainer Style="max-height: 80vh ; overflow-y: scroll">*@
        <MudList Clickable="true" Dense="true" DisableGutters="true">
            <MudListItem Text="Aktivite" Disabled="@isActivityDisabled" OnClick="Activity" />
            <MudDivider />
            <MudListItem Text="Mağaza" Disabled="@isMagazaDisabled" />
            <MudListItem Text="Tanıtıcı" Disabled="@isTaniticiDisabled" />
            <MudDivider />
            <MudListItem Text="Onayla" Disabled="@isOnaylaDisabled" OnClick="Onayla" />
        </MudList>
        @*</MudContainer>*@
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] private UserStateProvider? USP { get; set; }

    private IEnumerable<AH>? data; // = new List<Element>();
    private int selectedRowNumber = -1;
    private MudDataGrid<AH>? mudDataGrid;
    private bool contextMenuVisible;
    private HashSet<AH> selectedItems = new();

    private bool isActivityDisabled = true;
    private bool isMagazaDisabled = true;
    private bool isTaniticiDisabled = true;
    private bool isOnaylaDisabled = true;

    private DialogOptions dialogOptions = new() { NoHeader = true, };

    private Func<AH, int, string> _rowStyleFunc => (x, i) =>
    {
        string style = "";
        if (x.Ok == "H")
            style = "font-weight:500";
        //style += "background-color:#8CED8C";

        return style;
    };

    private async Task Activity()
    {
    }

    private async Task Onayla()
    {
        contextMenuVisible = false;
    }

    private void ContextMenuShow(AH item)
    {
        mudDataGrid.SelectedItem = item;

        contextMenuVisible = true;
    }

    private void selectedItemChanged(AH item)
    {
    }
    private string SelectedRowClassFunc(AH element, int rowNumber)
    {
        //if (selectedRowNumber == rowNumber)
        //{
        //    selectedRowNumber = -1;
        //    return string.Empty;
        //}
        if (mudDataGrid.SelectedItem != null && mudDataGrid.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<UserStateProvider>(nameof(USP), out var value))
        {
            if (value is null || value.UsrTyp != "T")
                NavigationManager.NavigateTo("");
            else
                await base.SetParametersAsync(parameters);  //Diger LifeCyle metodlarini cagiriyor
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Deneme
        string sql = $"select * from AH_ACTIVE(@UsrTyp, @UsrId)";
        data = await db.LoadData<AH, dynamic>(sql, new { UsrTyp = USP.UsrTyp, UsrId = USP.UsrId });
    }

    void RowClicked(DataGridRowClickEventArgs<AH> args)
    {
    }

    private void OnOkClick(AH itm)
    {
        itm.Ok = itm.isOk ? "H" : "E";

        db.StoreProc<dynamic, dynamic>("AH_OK(@AHid,@OkWho,@Ok)", new { AHid = itm.AHid, OkWho = USP.UsrId, Ok = itm.Ok });
    }

    private sealed class AH
    {
        public int AHid { get; set; }
        public string? FrTyp { get; set; }
        public string? FrName { get; set; }
        public string? ToTyp { get; set; }
        public string? ToName { get; set; }
        public string? Ok { get; set; }
        public string? Sbj { get; set; }
        public string? Msg { get; set; }
        public MarkupString mMsg => (MarkupString)Msg;
        public DateTime InsTS { get; }
        public bool isOk => Ok == "E" ? true : false;
    }
}
