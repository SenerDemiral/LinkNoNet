@page "/tnt/mt"
@inject AppState AppState
@inject NavigationManager NavigationManager
@inject IDataAccess db
@inject IDialogService DialogService
@inject ClipboardService ClipboardService
<PageTitle>Tanıtıcı</PageTitle>

<style>
    .mud-table-cell {
        padding: 4px !important;
    }
    .link {
        border: 1px solid aqua;
        font-size: larger;
        padding: 6px;
        background-color: aliceblue;
    }
    .kupon {
        display: block;
        border: 1px solid aqua;
        font-size: larger;
        padding: 6px;
        background-color: aliceblue;
    }
</style>

<div class="mud-theme-dark">
    <MudText Align="Align.Center" Typo="Typo.body2">Mağaza Linkleri ve Kupon Kodları</MudText>
</div>


<div class="mx-auto my-2">
    <MudExpansionPanels>
        @foreach (var itm in data)
        {
            <MudExpansionPanel IsExpandedChanged="@((x) => ExpandedChanged(x, itm.MTid))">
                <TitleContent>
                    <MudText><b>@itm.Name</b></MudText>
                </TitleContent>
                <ChildContent>
                    <MudDataGrid T="MKS" Items="@mksd[itm.MTid]"
                                 Breakpoint="Breakpoint.None"
                                 FixedHeader="true" HorizontalScrollbar="false"
                                 Hover="true" Striped="true" Dense="true" Bordered="true"
                                 Filterable="false"
                                 Groupable="false"
                                 MultiSelection="false" >
                        <ToolBarContent>
                            <MudTextField T="string" Style="max-width:50%" Label="Link"  Variant="Variant.Outlined" Text="@itm.LNlink" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.ContentCopy" OnAdornmentClick="@(() => CopyToClipboard(itm.LNlink))" />
                        </ToolBarContent>
                        <ColGroup>
		                    <col style="width:5%;"/>
		                    <col style="width:5%;"/>
		                    <col style="width:5%;"/>
		                    <col />
	                    </ColGroup>
                        <Columns>
                            <Column T="MKS" Field="@nameof(MKS.isAktif)" Title="Aktif" >
                                <CellTemplate >
                                    <MudCheckBox Checked="@context.Item.isAktif" Disabled="true" Style="align-items: center;"></MudCheckBox>
                                </CellTemplate>
                            </Column>
                            <Column T="MKS" Field="@nameof(MKS.KuponNo)" Title="Kupon" >
                                <CellTemplate>
                                    <span class="kupon">@context.Item.KuponNo</span>
                                </CellTemplate>
                            </Column>
                            <Column T="MKS" Field="@nameof(MKS.EndTS)" Title="Bitiş" >
                                <CellTemplate>
                                    <MudText Align="Align.Center">@context.Item.EndTS.ToString("dd.MM.yy")</MudText>
                                </CellTemplate>
                            </Column>
                            <Column T="MKS" Field="@nameof(MKS.Info)" Title="Info" >
                                <CellTemplate>
                                    <textarea disabled name="description" style="width:100%; resize:vertical" >
                                        @context.Item.Info
                                    </textarea>
                                </CellTemplate>
                            </Column>
                        </Columns>
                    </MudDataGrid>
                </ChildContent>
            </MudExpansionPanel>
        }
    </MudExpansionPanels>
</div>



@*<MudDataGrid T="MT" Items="@data" @ref="mudDataGrid"
             Breakpoint="Breakpoint.None"
             FixedHeader="true" Height="@Constants.Height" HorizontalScrollbar="false"
             Virtualize="true"
             Hover="true" Striped="true" Dense="true" Bordered="true"
             Filterable="false"
             FilterMode="DataGridFilterMode.ColumnFilterMenu"
             Groupable="false"
             MultiSelection="false"
             RowClassFunc="@SelectedRowClassFunc" RowClass="py-0" >
    <Columns>
        <Column T="MT" Field="@nameof(MT.MTid)" Title="ID" />
        <Column T="MT" Field="@nameof(MT.Name)" Title="Ad" />
        <Column T="MT" Field="@nameof(MT.Uri)" Title="Link" >
            <CellTemplate>
                <MudLink Href="@context.Item.Uri" Target="_blank">@context.Item.Uri</MudLink>
            </CellTemplate>
        </Column>
    </Columns>
    <PagerContent>
    <MudDataGridPager T="MT" />
    </PagerContent>
</MudDataGrid>
*@
<MudDialog @bind-IsVisible="contextMenuVisible" Options="dialogOptions" DisableSidePadding="false">
    <DialogContent>
        @*<MudContainer Style="max-height: 80vh ; overflow-y: scroll">*@
        <MudList Clickable="true" Dense="true" DisableGutters="true">
            <MudListItem Text="Aktivite" Disabled="@isActivityDisabled" OnClick="Activity" />
            <MudDivider />
            <MudListItem Text="Mağaza" Disabled="@isMagazaDisabled" />
            <MudListItem Text="Tanıtıcı" Disabled="@isTaniticiDisabled" />
        </MudList>
        @*</MudContainer>*@
    </DialogContent>
</MudDialog>

@code {
    //[CascadingParameter] App app { get; set; }
    private MudTextField<string> singleLineReference;
    private IEnumerable<MT>? data; // = new List<Element>();
    private Dictionary<int, List<MKS>> mksd = new();
    private int selectedRowNumber = -1;
    private MudDataGrid<MT>? mudDataGrid;
    private bool contextMenuVisible;

    private bool isActivityDisabled = true;
    private bool isMagazaDisabled = true;
    private bool isTaniticiDisabled = true;
    private bool isOnaylaDisabled = true;

    private DialogOptions dialogOptions = new() { NoHeader = true, };

    async Task CopyToClipboard(string txt)
    {
        // Writing to the clipboard may be denied, so you must handle the exception
        try
        {
            await ClipboardService.WriteTextAsync(txt);
        }
        catch
        {
            Console.WriteLine("Cannot write text to clipboard");
        }
    }
    private async Task ExpandedChanged(bool newVal, int mtId)
    {
        if (newVal)
        {
            //await Task.Delay(600);
            //_panelContent = _bigAsyncContent;
        }
        else
        {
            // Reset after a while to prevent sudden collapse.
            //Task.Delay(350).ContinueWith(t => _panelContent = null).AndForget();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        int refId = AppState.UsrRefId;
        string sql = $"select MTid, Name, Uri from MT";
        data = await db.LoadData<MT, dynamic>(sql, new { });
        foreach(var mt in data)
        {
            mt.LNlink = $"http://rdr.LinkNo.Net/cst?mt={mt.MTid}&tt={refId}";

            var mksl = new List<MKS>();
            mksd.Add(mt.MTid, mksl);
            //string ssql = "select * from MKS where MTid = @MTid order by Aktif, EndTS desc";
            string ssql = "select * from MKS_ACTIVE(@MTid) order by EndTS desc";
            var dmks = await db.LoadData<MKS, dynamic>(ssql, new { MTid= mt.MTid });
            foreach(var mks in dmks)
            {
                mks.KuponNo = $"LN{refId}{mks.Seri}";
                mksl.Add(mks);
            }
        }
    }

    private async Task Activity()
    {
        contextMenuVisible = false;
    }

    private void ContextMenuShow(MT item)
    {
        mudDataGrid.SelectedItem = item;

        isActivityDisabled = false;

        contextMenuVisible = true;
    }

    private string SelectedRowClassFunc(MT element, int rowNumber)
    {
        //if (selectedRowNumber == rowNumber)
        //{
        //    selectedRowNumber = -1;
        //    return string.Empty;
        //}
        if (mudDataGrid.SelectedItem != null && mudDataGrid.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        if (AppState.UsrTyp != "T")
        {
            NavigationManager.NavigateTo("/");
            return Task.CompletedTask;  // Hic biryere gitmeden Dispose gidip cikiyor
        }
        return base.SetParametersAsync(parameters); // Diger LifeCyle metodlarini cagiriyor
    }


    private sealed class MT
    {
        public int MTid { get; set; }
        public string? Name { get; set; }
        public string? Uri { get; set; }
        public string? LNlink { get; set; } 

    }

    private sealed class MKS
    {
        public int MTid { get; set; }
        public string Seri { get; set; }
        public string KuponNo { get; set; }
        public string? Info { get; set; }
        public DateTime EndTS { get; set; }
        public string Aktif { get; set; }
        public bool isAktif => Aktif == "E" ? true : false; 

    }
}
