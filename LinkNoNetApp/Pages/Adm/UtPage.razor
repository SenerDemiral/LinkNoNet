@page "/adm/ut"
@inject NavigationManager NavigationManager
@inject IDataAccess db
@inject IDialogService DialogService
@inject IEmailService EmailService
<PageTitle>Admin</PageTitle>

<style>
    .mud-table-cell {
        padding: 4px !important;
    }
</style>

<div class="mud-theme-dark">
    <MudText Align="Align.Center" Typo="Typo.body2">Users</MudText>
</div>

<MudDataGrid T="UT" Items="@data" @ref="mudDataGrid"
             Breakpoint="Breakpoint.None"
             FixedHeader="true"
             Height="@Constants.Height"
             HorizontalScrollbar="false"
             Virtualize="true"
             Hover="true" Striped="true" Dense="true" Bordered="true"
             Filterable="false"
             FilterMode="DataGridFilterMode.ColumnFilterMenu"
             Groupable="false"
             MultiSelection="false"
             RowClassFunc="@SelectedRowClassFunc"
             RowClass="py-0"
             RowClick="@RowClicked"
             RowStyleFunc="@_rowStyleFunc">
    <Columns>
        <Column T="UT" Title="Detay" Filterable="false" Sortable="false">
            <CellTemplate>
                <MudIconButton Icon="@Icons.Material.Filled.Outbound"
                               Class="px-1 py-0"
                               Disabled="false"
                               OnClick="@(() => ContextMenuShow(context.Item))" />
            </CellTemplate>
        </Column>
        <Column T="UT" Field="@nameof(UT.UTid)" Title="ID" />
        <Column T="UT" Field="@nameof(UT.StuEnum)" Title="Statu" Groupable="true">
            <GroupTemplate>
                <span style="font-weight:bold">
                    @context.Grouping.Key
                    <MudChip Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small">
                        @context.Grouping.Count()
                    </MudChip>
                </span>
            </GroupTemplate>
        </Column>
        <Column T="UT" Field="@nameof(UT.Name)" Title="Ad" />
        <Column T="UT" Field="@nameof(UT.NN)" Title="Lakap" />
        <Column T="UT" Field="@nameof(UT.TypAd)" Title="Typ" Groupable="true">
            <GroupTemplate>
                <span style="font-weight:bold">
                    @context.Grouping.Key
                    <MudChip Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small">
                        @context.Grouping.Count()
                    </MudChip>
                </span>
            </GroupTemplate>
        </Column>
        <Column T="UT" Field="@nameof(UT.RefId)" />
        <Column T="UT" Field="@nameof(UT.UpdTS)">
            <CellTemplate>
                @context.Item.UpdTS.ToString("dd.MM.yy HH:mm")
            </CellTemplate>
        </Column>
    </Columns>
</MudDataGrid>

<MudDialog @bind-IsVisible="contextMenuVisible"
           Options="dialogOptions"
           DisableSidePadding="false">
    <DialogContent>
        @*<MudContainer Style="max-height: 80vh ; overflow-y: scroll">*@
        <MudList Clickable="true" Dense="true" DisableGutters="true">
            <MudListItem Text="Aktivite" Disabled="@isActivityDisabled" OnClick="Activity" />
            <MudDivider />
            <MudListItem Text="Mağaza" Disabled="@isMagazaDisabled" />
            <MudListItem Text="Tanıtıcı" Disabled="@isTaniticiDisabled" />
            <MudDivider />
            <MudListItem Text="Onayla" Disabled="@isOnaylaDisabled" OnClick="Onayla" />
        </MudList>
        @*</MudContainer>*@
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] private UserStateProvider? USP { get; set; }

    private IEnumerable<UT>? data; // = new List<Element>();
    string sty { get; set; }
    private int selectedRowNumber = -1;
    private MudDataGrid<UT>? mudDataGrid;
    private bool contextMenuVisible;

    private bool isActivityDisabled = true;
    private bool isMagazaDisabled = true;
    private bool isTaniticiDisabled = true;
    private bool isOnaylaDisabled = true;

    private DialogOptions dialogOptions = new() { NoHeader = true, };

    private Func<UT, int, string> _rowStyleFunc => (x, i) =>
    {
        string style = "";
        if (x.Typ == "A")
            style += "background-color:#8CED8C";
        if (x.Typ == "M")
            style += "background-color:#E5BDE5";

        return style;
    };

    private async Task Activity()
    {
        //app.AddDynCmp("UsrAct", typeof(UaAdm), new(){
        //    { "UTid", mudDataGrid.SelectedItem.UTid },
        //    { "Title", mudDataGrid.SelectedItem.NN }
        //}, true);

        var parameters = new DialogParameters
            {
                ["UTid"] = mudDataGrid.SelectedItem.UTid,
                ["Title"] = mudDataGrid.SelectedItem.NN,
            };

        var result = await DialogService.Show<UApage>($"{mudDataGrid.SelectedItem.NN} Activities", parameters).Result;

        contextMenuVisible = false;
    }

    private async Task Onayla()
    {
        //string sp = $"TT_ONAYLA(@Who, @UTid)";
        //var rtrn = db.StoreProc<ttOnaylaOut, dynamic>(sp, new { Who = AppState.UsrId, UTid = mudDataGrid.SelectedItem.UTid });
        //mudDataGrid.SelectedItem.Stu = rtrn.NewStu;
        //await EmailService.SendEmailAsync(rtrn.eMail, rtrn.eSubject, rtrn.eBody).ConfigureAwait(false);

        // Deneme
        string body = "Sayın <b>[USRNAME]</b><br/><br/><a href='http://linkno.net'>LinkNo.net</a> sitemize giriş bilgileriniz aşağıda belirtimiştir.<br/><br/>UsrId: <b>[USRID]</b><br/><br/>Pwd: <b>[USRPWD]</b><br/><br/>Lütfen bu maile yanıt vermeyin (no-reply).";
        await EmailService.SendEmailAsync("sener.demiral@gmail.com", "Deneme", body).ConfigureAwait(false);

        contextMenuVisible = false;
    }

    private void ContextMenuShow(UT item)
    {
        mudDataGrid.SelectedItem = item;

        isActivityDisabled = false;
        isMagazaDisabled = item.Typ == "M" ? false : true;
        isTaniticiDisabled = item.Typ == "T" ? false : true;
        isOnaylaDisabled = item.Stu == -1 ? false : true;

        contextMenuVisible = true;
    }

    private string SelectedRowClassFunc(UT element, int rowNumber)
    {
        //if (selectedRowNumber == rowNumber)
        //{
        //    selectedRowNumber = -1;
        //    return string.Empty;
        //}
        if (mudDataGrid.SelectedItem != null && mudDataGrid.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<UserStateProvider>(nameof(USP), out var value))
        {
            if (value is null || value.UsrTyp != "A")
                NavigationManager.NavigateTo("");
            else
                await base.SetParametersAsync(parameters);  //Diger LifeCyle metodlarini cagiriyor
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Deneme
        string sql = $"select * from UT order by UTid";
        data = await db.LoadData<UT, dynamic>(sql, new { });
    }

    void RowClicked(DataGridRowClickEventArgs<UT> args)
    {
        //_events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
        //Typ = args.Item.Typ;
        //RefId = args.Item.RefId;
        //sty = $"position:fixed; top:{args.MouseEventArgs.PageY}px; left:{args.MouseEventArgs.PageX}px;";
        //inLineDialogVisible = true;
    }

    private sealed class UT
    {
        public int UTid { get; set; }
        public string? Typ { get; set; }
        public int Stu { get; set; }
        public string? StuAd { get; set; }
        public string? NN { get; set; }
        public string? Name { get; set; }
        public string? eMail { get; set; }
        public string? mTel { get; set; }
        public int RefId { get; set; }
        public DateTime UpdTS { get; }

        public Constants.ttStus StuEnum => (Constants.ttStus)Stu;
        public string TypAd => Typ switch
        {
            "A" => "Admin",
            "M" => "Mağaza",
            "T" => "Tanıtıcı",
            _ => "?"
        };
    }

    private sealed class ttOnaylaOut
    {
        public int NewStu { get; set; }
        public string? eMail { get; set; }
        public string? eBody { get; set; }
        public string? eSubject { get; set; }
    }

}
